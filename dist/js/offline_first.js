class OffLineFirst{registerServiceWorker(){if(!navigator.serviceWorker)return;const offLineFirst=this;navigator.serviceWorker.register("sw.js").then(function(reg){navigator.serviceWorker.controller&&(reg.waiting?offLineFirst.updateReady(reg.waiting):reg.installing?offLineFirst.trackInstalling(reg.installing):reg.addEventListener("updatefound",function(){offLineFirst.trackInstalling(reg.installing)}))})}trackInstalling(worker){const offLineFirst=this;worker.addEventListener("statechange",function(){"installed"==worker.state&&offLineFirst.updateReady(worker)})}updateReady(worker){const div=document.createElement("div");div.id="service-worker",div.className="service-worker";const refresh=document.createElement("button");refresh.id="refresh",refresh.type="button",refresh.className="button-sw",refresh.innerHTML="refresh",div.append(refresh);const dismiss=document.createElement("button");dismiss.id="dismiss",dismiss.type="button",dismiss.className="button-sw",dismiss.innerHTML="dismiss",div.append(dismiss),document.body.append(div),refresh.addEventListener("click",function(event){worker.postMessage({action:"skipWaiting"})}),dismiss.addEventListener("click",function(event){div.style.display="none"})}static getReviewsRestaurantsOfflineValuesDatabase(callback){let arrayReviewsOffline=[];DBHelper.openDatabase().then(function(db){return db.transaction("reviews-offline").objectStore("reviews-offline").openCursor()}).then(function createArrayReviewsRestaurant(cursor){if(cursor)return arrayReviewsOffline.push(cursor.value),cursor.continue().then(createArrayReviewsRestaurant)}).then(function(){callback(null,arrayReviewsOffline),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}static deleteReviewsRestaurantsOfflineValuesDatabase(id_review){DBHelper.openDatabase().then(function(db){return db.transaction("reviews-offline","readwrite").objectStore("reviews-offline").delete(id_review)}).then(function(){console.log("Review deleted")}).catch(function(){console.log("Transaction failed")})}static getFavoritesRestaurantsOfflineValuesDatabase(callback){let arrayFavoritesOffline=[];DBHelper.openDatabase().then(function(db){return db.transaction("favorites-restaurants-offline").objectStore("favorites-restaurants-offline").openCursor()}).then(function createArrayFavoritesRestaurants(cursor){if(cursor)return arrayFavoritesOffline.push(cursor.value),cursor.continue().then(createArrayFavoritesRestaurants)}).then(function(){callback(null,arrayFavoritesOffline),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}static deleteFavoritesRestaurantsOfflineValuesDatabase(id_restaurant){DBHelper.openDatabase().then(function(db){return db.transaction("favorites-restaurants-offline","readwrite").objectStore("favorites-restaurants-offline").delete(id_restaurant)}).then(function(){console.log("Favorites Restaurants deleted")}).catch(function(){console.log("Transaction failed")})}}const offLine=new OffLineFirst;if(offLine.registerServiceWorker(),window.Worker){const myWorker=new Worker("../ww.js");let areReviewsOffline=!1,areFavoritesRestaurantsOffline=!1;function addReviewsOffline(){OffLineFirst.getReviewsRestaurantsOfflineValuesDatabase(function(error,reviews){if(error)console.log(error);else{if(0==reviews.length){if(areReviewsOffline){const advise="Connection restored, Reviews offline added thanks";DBHelper.openAdviseUser(advise,"hide")}clearInterval(idIntervalReviews)}else areReviewsOffline=!0;reviews.forEach(function(review){myWorker.postMessage(["Review",review]),console.log("Message posted to worker"),myWorker.addEventListener("message",function(e){e.data>=0?(OffLineFirst.deleteReviewsRestaurantsOfflineValuesDatabase(e.data),console.log("Message received from worker: Added review")):console.log(e.data)})})}})}const idIntervalReviews=setInterval(addReviewsOffline,5e3);function addFavoritesRestaurantsOffline(){OffLineFirst.getFavoritesRestaurantsOfflineValuesDatabase(function(error,favoritesRestaurants){if(error)console.log(error);else{if(0==favoritesRestaurants.length){if(areFavoritesRestaurantsOffline){const advise="Connection restored, Favorites Restaurants offline added thanks";DBHelper.openAdviseUser(advise,"hide")}clearInterval(idIntervalFavoritesRestaurants)}else areFavoritesRestaurantsOffline=!0;favoritesRestaurants.forEach(function(favoriteRestaurant){console.log(favoriteRestaurant),myWorker.postMessage(["Favorite Restaurant",favoriteRestaurant]),console.log("Message posted to worker"),myWorker.addEventListener("message",function(e){e.data>=0?(OffLineFirst.deleteFavoritesRestaurantsOfflineValuesDatabase(e.data),console.log("Message received from worker: Added favorites restaurants")):console.log(e.data)})})}})}const idIntervalFavoritesRestaurants=setInterval(addFavoritesRestaurantsOffline,5e3)}