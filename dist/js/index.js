!function(){function promisifyRequest(request){return new Promise(function(resolve,reject){request.onsuccess=function(){resolve(request.result)},request.onerror=function(){reject(request.error)}})}function promisifyRequestCall(obj,method,args){var request,p=new Promise(function(resolve,reject){promisifyRequest(request=obj[method].apply(obj,args)).then(resolve,reject)});return p.request=request,p}function proxyProperties(ProxyClass,targetProp,properties){properties.forEach(function(prop){Object.defineProperty(ProxyClass.prototype,prop,{get:function(){return this[targetProp][prop]},set:function(val){this[targetProp][prop]=val}})})}function proxyRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return promisifyRequestCall(this[targetProp],prop,arguments)})})}function proxyMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return this[targetProp][prop].apply(this[targetProp],arguments)})})}function proxyCursorRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return obj=this[targetProp],(p=promisifyRequestCall(obj,prop,arguments)).then(function(value){if(value)return new Cursor(value,p.request)});var obj,p})})}function Index(index){this._index=index}function Cursor(cursor,request){this._cursor=cursor,this._request=request}function ObjectStore(store){this._store=store}function Transaction(idbTransaction){this._tx=idbTransaction,this.complete=new Promise(function(resolve,reject){idbTransaction.oncomplete=function(){resolve()},idbTransaction.onerror=function(){reject(idbTransaction.error)},idbTransaction.onabort=function(){reject(idbTransaction.error)}})}function UpgradeDB(db,oldVersion,transaction){this._db=db,this.oldVersion=oldVersion,this.transaction=new Transaction(transaction)}function DB(db){this._db=db}proxyProperties(Index,"_index",["name","keyPath","multiEntry","unique"]),proxyRequestMethods(Index,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),proxyCursorRequestMethods(Index,"_index",IDBIndex,["openCursor","openKeyCursor"]),proxyProperties(Cursor,"_cursor",["direction","key","primaryKey","value"]),proxyRequestMethods(Cursor,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(methodName){methodName in IDBCursor.prototype&&(Cursor.prototype[methodName]=function(){var cursor=this,args=arguments;return Promise.resolve().then(function(){return cursor._cursor[methodName].apply(cursor._cursor,args),promisifyRequest(cursor._request).then(function(value){if(value)return new Cursor(value,cursor._request)})})})}),ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments))},ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments))},proxyProperties(ObjectStore,"_store",["name","keyPath","indexNames","autoIncrement"]),proxyRequestMethods(ObjectStore,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),proxyCursorRequestMethods(ObjectStore,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),proxyMethods(ObjectStore,"_store",IDBObjectStore,["deleteIndex"]),Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments))},proxyProperties(Transaction,"_tx",["objectStoreNames","mode"]),proxyMethods(Transaction,"_tx",IDBTransaction,["abort"]),UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments))},proxyProperties(UpgradeDB,"_db",["name","version","objectStoreNames"]),proxyMethods(UpgradeDB,"_db",IDBDatabase,["deleteObjectStore","close"]),DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments))},proxyProperties(DB,"_db",["name","version","objectStoreNames"]),proxyMethods(DB,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(funcName){[ObjectStore,Index].forEach(function(Constructor){Constructor.prototype[funcName.replace("open","iterate")]=function(){var arr,args=(arr=arguments,Array.prototype.slice.call(arr)),callback=args[args.length-1],nativeObject=this._store||this._index,request=nativeObject[funcName].apply(nativeObject,args.slice(0,-1));request.onsuccess=function(){callback(request.result)}}})}),[Index,ObjectStore].forEach(function(Constructor){Constructor.prototype.getAll||(Constructor.prototype.getAll=function(query,count){var instance=this,items=[];return new Promise(function(resolve){instance.iterateCursor(query,function(cursor){cursor?(items.push(cursor.value),void 0===count||items.length!=count?cursor.continue():resolve(items)):resolve(items)})})})});var exp={open:function(name,version,upgradeCallback){var p=promisifyRequestCall(indexedDB,"open",[name,version]),request=p.request;return request.onupgradeneeded=function(event){upgradeCallback&&upgradeCallback(new UpgradeDB(request.result,event.oldVersion,request.transaction))},p.then(function(db){return new DB(db)})},delete:function(name){return promisifyRequestCall(indexedDB,"deleteDatabase",[name])}};"undefined"!=typeof module?(module.exports=exp,module.exports.default=module.exports):self.idb=exp}();class DBHelper{static RESTAURANTS_DATABASE_URL(id=null){return id?`http://localhost:1337/restaurants/${id}`:"http://localhost:1337/restaurants/"}static REVIEWS_DATABASE_URL(restaurant_id=null){return restaurant_id?`http://localhost:1337/reviews/?restaurant_id=${restaurant_id}`:"http://localhost:1337/reviews/"}static openAdviseUser(advise,type){const modalOverlay=document.querySelector(".modal-overlay");modalOverlay.style.zIndex=9;const info_box=document.createElement("div");info_box.classList.add("info-box");const message=document.createElement("p");message.innerHTML=advise,info_box.appendChild(message),document.body.appendChild(info_box),"reload"==type?setTimeout(function(){location.reload(!0)},3e3):"hide"==type&&setTimeout(function(){modalOverlay.style.display="none",info_box.style.display="none"},3e3)}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-review",1,function(upgradeDb){let restaurantsStore,reviewsStore,reviewsOfflineStore,favoritesRestaurantsOfflineStore;switch(upgradeDb.oldVersion){case 0:restaurantsStore=upgradeDb.createObjectStore("restaurants",{keyPath:"id",autoIncrement:!0});case 1:(reviewsStore=upgradeDb.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0})).createIndex("restaurant_id","restaurant_id",{unique:!1});case 2:reviewsOfflineStore=upgradeDb.createObjectStore("reviews-offline",{keyPath:"id",autoIncrement:!0});case 3:favoritesRestaurantsOfflineStore=upgradeDb.createObjectStore("favorites-restaurants-offline",{keyPath:"id"})}}):Promise.resolve()}static putValuesRestaurantsDatabase(){fetch(DBHelper.RESTAURANTS_DATABASE_URL()).then(function(response){if(response.ok)return response.json();return"Data not loaded"}).then(function(restaurants){DBHelper.openDatabase().then(function(db){const tx=db.transaction("restaurants","readwrite"),restaurantsStore=tx.objectStore("restaurants");for(let i=0;i<restaurants.length;i++)restaurantsStore.put(restaurants[i]);return tx.complete}).then(function(){console.log("Add restaurants")}).catch(function(){console.log("Transaction failed")})}).catch(function(){return"Network error"})}static putIsFavoriteRestaurantDatabase(id_restaurant,favorite,favoriteHTML){let is_favorite;is_favorite="true"==String(favorite)?"/?is_favorite=false":"/?is_favorite=true",console.log(DBHelper.RESTAURANTS_DATABASE_URL(id_restaurant)+is_favorite),fetch(DBHelper.RESTAURANTS_DATABASE_URL(id_restaurant)+is_favorite,{method:"PUT","Accept-Charset":"utf-8","Content-Type":"application/json"}).then(function(response){if(response.ok)return response.json();return"Data not loaded"}).then(function(restaurant){"true"==String(restaurant.is_favorite)?(favoriteHTML.innerHTML="&#9733;",favoriteHTML.setAttribute("data-favorite","true")):(favoriteHTML.innerHTML="&#9734;",favoriteHTML.setAttribute("data-favorite","false")),DBHelper.openDatabase().then(function(db){const tx=db.transaction("restaurants","readwrite");return tx.objectStore("restaurants").put(restaurant),tx.complete}).then(function(){console.log("Update favorite restaurant")}).catch(function(){console.log("Transaction failed")})}).catch(function(){DBHelper.putOfflineIsFavoriteRestaurantDatabase(id_restaurant,favorite,favoriteHTML);return"Network error"})}static putValuesReviewsDatabase(){fetch(DBHelper.REVIEWS_DATABASE_URL()).then(function(response){if(response.ok)return response.json();return"Data not loaded"}).then(function(reviews){DBHelper.openDatabase().then(function(db){const tx=db.transaction("reviews","readwrite"),reviewsStore=tx.objectStore("reviews");for(let i=0;i<reviews.length;i++)reviewsStore.put(reviews[i]);return tx.complete}).then(function(){console.log("Add reviews")}).catch(function(){console.log("Transaction failed")})}).catch(function(){return"Network error"})}static putOfflineValuesReviewDatabase(data_review,data_offline_review){DBHelper.openDatabase().then(function(db){const tx=db.transaction(["reviews","reviews-offline"],"readwrite");return tx.objectStore("reviews").put(data_review),tx.objectStore("reviews-offline").put(data_offline_review),tx.complete}).then(function(){console.log("Add review");DBHelper.openAdviseUser("No connection, the review will be sent as soon as possible thanks","reload")}).catch(function(){console.log("Transaction failed")})}static putOfflineIsFavoriteRestaurantDatabase(id_restaurant,favorite,favoriteHTML){let is_favorite;is_favorite="true"==String(favorite)?"false":"true";const data_offline_favorite_restaurant={id:id_restaurant,is_favorite:String(is_favorite)};DBHelper.openDatabase().then(function(db){return db.transaction("restaurants","readwrite").objectStore("restaurants").get(id_restaurant)}).then(function(restaurant){"true"==String(favorite)?restaurant.is_favorite="false":restaurant.is_favorite="true",DBHelper.openDatabase().then(function(db){const tx=db.transaction(["restaurants","favorites-restaurants-offline"],"readwrite");return tx.objectStore("restaurants").put(restaurant),tx.objectStore("favorites-restaurants-offline").put(data_offline_favorite_restaurant),tx.complete}).then(function(){"true"==favorite?(favoriteHTML.innerHTML="&#9734;",favoriteHTML.setAttribute("data-favorite","false")):(favoriteHTML.innerHTML="&#9733;",favoriteHTML.setAttribute("data-favorite","true")),console.log("Update favorite restaurant");DBHelper.openAdviseUser("No connection, the favorites restaurants will be sent as soon as possible thanks","hide")})}).catch(function(){console.log("Transaction failed")})}static getRestaurantsValuesDatabase(id=null,callback){if(id){DBHelper.openDatabase().then(function(db){return db.transaction("restaurants").objectStore("restaurants").get(Number(id))}).then(function(restaurant_value){callback(null,restaurant_value),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}else{let arrayRestaurants=[];DBHelper.openDatabase().then(function(db){return db.transaction("restaurants").objectStore("restaurants").openCursor()}).then(function createArrayRestaurants(cursor){if(cursor)return arrayRestaurants.push(cursor.value),cursor.continue().then(createArrayRestaurants)}).then(function(){callback(null,arrayRestaurants),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}}static getReviewsRestaurantValuesDatabase(restaurant_id,callback){let arrayReviews=[];DBHelper.openDatabase().then(function(db){return db.transaction("reviews").objectStore("reviews").index("restaurant_id").openCursor(Number(restaurant_id))}).then(function createArrayReviewsRestaurant(cursor){if(cursor)return arrayReviews.push(cursor.value),cursor.continue().then(createArrayReviewsRestaurant)}).then(function(){callback(null,arrayReviews),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}static fetchRestaurants(callback){fetch(DBHelper.RESTAURANTS_DATABASE_URL()).then(function(response){if(response.ok)return response.json();DBHelper.getRestaurantsValuesDatabase(null,callback)}).then(function(restaurants){callback(null,restaurants)}).catch(function(){DBHelper.getRestaurantsValuesDatabase(null,callback)})}static fetchReviewsRestaurant(restaurant_id,callback){fetch(DBHelper.REVIEWS_DATABASE_URL(restaurant_id)).then(function(response){if(response.ok)return response.json();DBHelper.getReviewsRestaurantValuesDatabase(restaurant_id,callback)}).then(function(reviews){callback(null,reviews)}).catch(function(){DBHelper.getReviewsRestaurantValuesDatabase(restaurant_id,callback)})}static fetchRestaurantById(id,callback){fetch(DBHelper.RESTAURANTS_DATABASE_URL(id)).then(function(response){if(response.ok)return response.json();DBHelper.getRestaurantsValuesDatabase(id,callback)}).then(function(restaurant){callback(null,restaurant)}).catch(function(){DBHelper.getRestaurantsValuesDatabase(id,callback)})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(){return"./img/"}static mapMarkerForRestaurant(restaurant,map){const restaurant_info=restaurant.name+", Cuisine: "+restaurant.cuisine_type+", Today open: "+findRestaurantCurrentDayOpeningTimeHTML(restaurant.operating_hours);return new google.maps.Marker({position:restaurant.latlng,url:DBHelper.urlForRestaurant(restaurant),title:restaurant_info,map,animation:google.maps.Animation.DROP})}static mapMarkerForRestaurantInfo(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,url:DBHelper.urlForRestaurant(restaurant),title:restaurant.name,map,animation:google.maps.Animation.DROP})}}let restaurants,neighborhoods,cuisines;var map;DBHelper.putValuesRestaurantsDatabase();var idFrame,markers=[];document.addEventListener("DOMContentLoaded",event=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{error?console.error(error):(self.neighborhoods=neighborhoods,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach(neighborhood=>{const option=document.createElement("option");option.innerHTML=neighborhood,option.value=neighborhood,select.append(option)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((error,cuisines)=>{error?console.error(error):(self.cuisines=cuisines,fillCuisinesHTML())})}),fillCuisinesHTML=((cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach(cuisine=>{const option=document.createElement("option");option.innerHTML=cuisine,option.value=cuisine,select.append(option)})}),updateRestaurants=(()=>{const cSelect=document.getElementById("cuisines-select"),nSelect=document.getElementById("neighborhoods-select"),cIndex=cSelect.selectedIndex,nIndex=nSelect.selectedIndex,cuisine=cSelect[cIndex].value,neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{error?console.error(error):(resetRestaurants(restaurants),fillRestaurantsHTML())})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),resetRestaurants=(restaurants=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(m=>m.setMap(null)),self.markers=[],self.restaurants=restaurants}),fillRestaurantsHTML=((restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");restaurants.forEach(function(restaurant){ul.append(createRestaurantHTML(restaurant))}),addMarkersToMap()}),createRestaurantHTML=(restaurant=>{const li=document.createElement("li"),cont_rest=document.createElement("article");cont_rest.className="cont-restaurant",cont_rest.id=`restaurant_${restaurant.id}`,li.append(cont_rest);const favorite=document.createElement("span");favorite.tabIndex=0,favorite.className="favorite",favorite.setAttribute("data-favorite",String(restaurant.is_favorite)),"true"==String(restaurant.is_favorite)?favorite.innerHTML="&#9733;":favorite.innerHTML="&#9734;",cont_rest.append(favorite),favorite.addEventListener("click",function(event){DBHelper.putIsFavoriteRestaurantDatabase(restaurant.id,favorite.getAttribute("data-favorite"),favorite)}),favorite.addEventListener("focus",function(event){window.addEventListener("keydown",function(event){const key=event.charCode||event.keyCode;13!==key&&32!==key||(event.preventDefault(),DBHelper.putIsFavoriteRestaurantDatabase(restaurant.id,favorite.getAttribute("data-favorite"),favorite))})});const picture=document.createElement("picture"),source=document.createElement("source");source.srcset=`${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_1x} 1x, ${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_2x} 2x`,picture.append(source);const image=document.createElement("img");image.className="restaurant-img",image.src=`${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_maxw}`,image.alt=`Image of ${restaurant.name}`,picture.append(image),cont_rest.append(picture);const name=document.createElement("h1");name.innerHTML=restaurant.name,cont_rest.append(name);const div=document.createElement("div");div.className="restaurant-info",cont_rest.append(div);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood,div.append(neighborhood);const address=document.createElement("p");address.innerHTML=restaurant.address,div.append(address);const cont_more=document.createElement("p");cont_more.className="cont-more";const more=document.createElement("a");return more.className="button",more.innerHTML="View Details",more.setAttribute("aria-label","Name: "+restaurant.name+"; Neighborhood: "+restaurant.neighborhood),more.href=DBHelper.urlForRestaurant(restaurant),cont_more.append(more),cont_rest.append(cont_more),li}),findRestaurantCurrentDayOpeningTimeHTML=((operatingHours=self.restaurant.operating_hours)=>{const today=(new Date).toDateString().split(" ")[0];for(let key in operatingHours)if(key.substr(0,3)==today)return operatingHours[key]}),addMarkersToMap=((restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map),restaurant_info="<h2>"+restaurant.name+"</h2><p><strong>Cuisine: </strong><em>"+restaurant.cuisine_type+"</em></p><p><strong>Today open: </strong><em>"+findRestaurantCurrentDayOpeningTimeHTML(restaurant.operating_hours)+"</em></p>",infowindow=new google.maps.InfoWindow({content:restaurant_info});marker.addListener("mouseover",function(){infowindow.open(map,marker)}),marker.addListener("mouseout",function(){infowindow.close()}),google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url}),self.markers.push(marker)})});const neighborhoods_select=document.getElementById("neighborhoods-select");neighborhoods_select.addEventListener("change",function(){updateRestaurants()});const cuisines_select=document.getElementById("cuisines-select");cuisines_select.addEventListener("change",function(){updateRestaurants()}),window.addEventListener("keydown",function(event){if(window.innerWidth<1060){if(9===(event.charCode||event.keyCode)){const buttons=document.getElementsByClassName("button");for(let i=0;i<buttons.length;i++)buttons[i].addEventListener("focus",function(event){buttons[i].parentElement.previousSibling.classList.add("visible")}),buttons[i].addEventListener("blur",function(event){buttons[i].parentElement.previousSibling.classList.remove("visible")})}}});const skip_link_index=document.getElementById("skip-link-index");if(null!==skip_link_index){const restaurant_focus_index=document.getElementById("restaurants");skip_link_index.addEventListener("keydown",function(event){const key=event.charCode||event.keyCode;32!==key&&13!==key||restaurant_focus_index.focus()})}