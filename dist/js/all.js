!function(){function promisifyRequest(request){return new Promise(function(resolve,reject){request.onsuccess=function(){resolve(request.result)},request.onerror=function(){reject(request.error)}})}function promisifyRequestCall(obj,method,args){var request,p=new Promise(function(resolve,reject){promisifyRequest(request=obj[method].apply(obj,args)).then(resolve,reject)});return p.request=request,p}function proxyProperties(ProxyClass,targetProp,properties){properties.forEach(function(prop){Object.defineProperty(ProxyClass.prototype,prop,{get:function(){return this[targetProp][prop]},set:function(val){this[targetProp][prop]=val}})})}function proxyRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return promisifyRequestCall(this[targetProp],prop,arguments)})})}function proxyMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return this[targetProp][prop].apply(this[targetProp],arguments)})})}function proxyCursorRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){prop in Constructor.prototype&&(ProxyClass.prototype[prop]=function(){return obj=this[targetProp],(p=promisifyRequestCall(obj,prop,arguments)).then(function(value){if(value)return new Cursor(value,p.request)});var obj,p})})}function Index(index){this._index=index}function Cursor(cursor,request){this._cursor=cursor,this._request=request}function ObjectStore(store){this._store=store}function Transaction(idbTransaction){this._tx=idbTransaction,this.complete=new Promise(function(resolve,reject){idbTransaction.oncomplete=function(){resolve()},idbTransaction.onerror=function(){reject(idbTransaction.error)},idbTransaction.onabort=function(){reject(idbTransaction.error)}})}function UpgradeDB(db,oldVersion,transaction){this._db=db,this.oldVersion=oldVersion,this.transaction=new Transaction(transaction)}function DB(db){this._db=db}proxyProperties(Index,"_index",["name","keyPath","multiEntry","unique"]),proxyRequestMethods(Index,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),proxyCursorRequestMethods(Index,"_index",IDBIndex,["openCursor","openKeyCursor"]),proxyProperties(Cursor,"_cursor",["direction","key","primaryKey","value"]),proxyRequestMethods(Cursor,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(methodName){methodName in IDBCursor.prototype&&(Cursor.prototype[methodName]=function(){var cursor=this,args=arguments;return Promise.resolve().then(function(){return cursor._cursor[methodName].apply(cursor._cursor,args),promisifyRequest(cursor._request).then(function(value){if(value)return new Cursor(value,cursor._request)})})})}),ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments))},ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments))},proxyProperties(ObjectStore,"_store",["name","keyPath","indexNames","autoIncrement"]),proxyRequestMethods(ObjectStore,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),proxyCursorRequestMethods(ObjectStore,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),proxyMethods(ObjectStore,"_store",IDBObjectStore,["deleteIndex"]),Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments))},proxyProperties(Transaction,"_tx",["objectStoreNames","mode"]),proxyMethods(Transaction,"_tx",IDBTransaction,["abort"]),UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments))},proxyProperties(UpgradeDB,"_db",["name","version","objectStoreNames"]),proxyMethods(UpgradeDB,"_db",IDBDatabase,["deleteObjectStore","close"]),DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments))},proxyProperties(DB,"_db",["name","version","objectStoreNames"]),proxyMethods(DB,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(funcName){[ObjectStore,Index].forEach(function(Constructor){Constructor.prototype[funcName.replace("open","iterate")]=function(){var arr,args=(arr=arguments,Array.prototype.slice.call(arr)),callback=args[args.length-1],nativeObject=this._store||this._index,request=nativeObject[funcName].apply(nativeObject,args.slice(0,-1));request.onsuccess=function(){callback(request.result)}}})}),[Index,ObjectStore].forEach(function(Constructor){Constructor.prototype.getAll||(Constructor.prototype.getAll=function(query,count){var instance=this,items=[];return new Promise(function(resolve){instance.iterateCursor(query,function(cursor){cursor?(items.push(cursor.value),void 0===count||items.length!=count?cursor.continue():resolve(items)):resolve(items)})})})});var exp={open:function(name,version,upgradeCallback){var p=promisifyRequestCall(indexedDB,"open",[name,version]),request=p.request;return request.onupgradeneeded=function(event){upgradeCallback&&upgradeCallback(new UpgradeDB(request.result,event.oldVersion,request.transaction))},p.then(function(db){return new DB(db)})},delete:function(name){return promisifyRequestCall(indexedDB,"deleteDatabase",[name])}};"undefined"!=typeof module?(module.exports=exp,module.exports.default=module.exports):self.idb=exp}();class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-review",1,function(upgradeDb){let restaurantsStore;switch(upgradeDb.oldVersion){case 0:restaurantsStore=upgradeDb.createObjectStore("restaurants",{keyPath:"id"})}}):Promise.resolve()}static putValuesDatabase(){fetch(DBHelper.DATABASE_URL).then(function(response){if(response.ok)return response.json();return"Data not loaded"}).then(function(restaurants){DBHelper.openDatabase().then(function(db){const tx=db.transaction("restaurants","readwrite"),restaurantsStore=tx.objectStore("restaurants");for(let i=0;i<restaurants.length;i++)restaurantsStore.put(restaurants[i]);return tx.complete}).then(function(){console.log("Add restaurants")}).catch(function(){console.log("Transaction failed")})}).catch(function(){return"Network error"})}static getValuesDatabase(callback){let arrayRestaurants=[];DBHelper.openDatabase().then(function(db){return db.transaction("restaurants").objectStore("restaurants").openCursor()}).then(function createArrayRestaurants(cursor){if(cursor)return arrayRestaurants.push(cursor.value),cursor.continue().then(createArrayRestaurants)}).then(function(){callback(null,arrayRestaurants),console.log("Transaction success")}).catch(function(){console.log("Transaction failed")})}static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(function(response){if(response.ok)return response.json();DBHelper.getValuesDatabase(callback)}).then(function(restaurants){callback(null,restaurants)}).catch(function(){DBHelper.getValuesDatabase(callback)})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?callback(null,restaurant):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return"./img/"}static mapMarkerForRestaurant(restaurant,map){const media_review=calcMediaReviews(restaurant.reviews),restaurant_info=restaurant.name+", Cuisine: "+restaurant.cuisine_type+(""!=media_review?", Media Review: "+media_review:"")+", Today open: "+findRestaurantCurrentDayOpeningTimeHTML(restaurant.operating_hours);return new google.maps.Marker({position:restaurant.latlng,url:DBHelper.urlForRestaurant(restaurant),title:restaurant_info,map,animation:google.maps.Animation.DROP})}static mapMarkerForRestaurantInfo(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,url:DBHelper.urlForRestaurant(restaurant),title:restaurant.name,map,animation:google.maps.Animation.DROP})}}if(DBHelper.putValuesDatabase(),-1===location.pathname.indexOf("restaurant.html")){var markers=[];document.addEventListener("DOMContentLoaded",event=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{error?console.error(error):(self.neighborhoods=neighborhoods,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach(neighborhood=>{const option=document.createElement("option");option.innerHTML=neighborhood,option.value=neighborhood,select.append(option)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((error,cuisines)=>{error?console.error(error):(self.cuisines=cuisines,fillCuisinesHTML())})}),fillCuisinesHTML=((cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach(cuisine=>{const option=document.createElement("option");option.innerHTML=cuisine,option.value=cuisine,select.append(option)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const cSelect=document.getElementById("cuisines-select"),nSelect=document.getElementById("neighborhoods-select"),cIndex=cSelect.selectedIndex,nIndex=nSelect.selectedIndex,cuisine=cSelect[cIndex].value,neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{error?console.error(error):(resetRestaurants(restaurants),fillRestaurantsHTML())})}),resetRestaurants=(restaurants=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(m=>m.setMap(null)),self.markers=[],self.restaurants=restaurants}),fillRestaurantsHTML=((restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant))}),addMarkersToMap()}),createRestaurantHTML=(restaurant=>{const li=document.createElement("li"),cont_rest=document.createElement("article");cont_rest.className="cont-restaurant",li.append(cont_rest);const picture=document.createElement("picture"),source=document.createElement("source");source.srcset=`${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_1x} 1x, ${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_2x} 2x`,picture.append(source);const image=document.createElement("img");image.className="restaurant-img",image.src=`${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_maxw}`,image.alt=`Image of ${restaurant.name}`,picture.append(image),cont_rest.append(picture);const name=document.createElement("h1");name.innerHTML=restaurant.name,cont_rest.append(name);const div=document.createElement("div");div.className="restaurant-info",cont_rest.append(div);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood,div.append(neighborhood);const address=document.createElement("p");address.innerHTML=restaurant.address,div.append(address);const cont_more=document.createElement("p");cont_more.className="cont-more";const more=document.createElement("a");return more.className="button",more.innerHTML="View Details",more.setAttribute("aria-label","Name: "+restaurant.name+"; Neighborhood: "+restaurant.neighborhood),more.href=DBHelper.urlForRestaurant(restaurant),cont_more.append(more),cont_rest.append(cont_more),li}),calcMediaReviews=((reviews=self.restaurant.reviews)=>{if(reviews){let i,sum=0,media=0,num_reviews=reviews.length;for(i=0;i<num_reviews;i++)sum+=reviews[i].rating;return media=(media=sum/num_reviews)>0?media.toFixed(2):""}return""}),findRestaurantCurrentDayOpeningTimeHTML=((operatingHours=self.restaurant.operating_hours)=>{const today=(new Date).toDateString().split(" ")[0];for(let key in operatingHours)if(key.substr(0,3)==today)return operatingHours[key]}),addMarkersToMap=((restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map),media_review=calcMediaReviews(restaurant.reviews),restaurant_info="<h2>"+restaurant.name+"</h2><p><strong>Cuisine: </strong><em>"+restaurant.cuisine_type+"</em></p>"+(""!=media_review?"<p><strong>Media Review: </strong><em>"+media_review+"</em></p>":"")+"<p><strong>Today open: </strong><em>"+findRestaurantCurrentDayOpeningTimeHTML(restaurant.operating_hours)+"</em></p>",infowindow=new google.maps.InfoWindow({content:restaurant_info});marker.addListener("mouseover",function(){infowindow.open(map,marker)}),marker.addListener("mouseout",function(){infowindow.close()}),google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url}),self.markers.push(marker)})}),document.getElementById("neighborhoods-select").addEventListener("change",function(){updateRestaurants()}),document.getElementById("cuisines-select").addEventListener("change",function(){updateRestaurants()}),window.addEventListener("keydown",function(event){if(window.innerWidth<1060){if(9===(event.charCode||event.keyCode)){const buttons=document.getElementsByClassName("button");for(let i=0;i<buttons.length;i++)buttons[i].addEventListener("focus",function(event){buttons[i].parentElement.previousSibling.classList.add("visible")}),buttons[i].addEventListener("blur",function(event){buttons[i].parentElement.previousSibling.classList.remove("visible")})}}});const skip_link_index=document.getElementById("skip-link-index");if(null!==skip_link_index){const restaurant_focus_index=document.getElementById("restaurants");skip_link_index.addEventListener("keydown",function(event){const key=event.charCode||event.keyCode;32!==key&&13!==key||restaurant_focus_index.focus()})}}class OffLineFirst{registerServiceWorker(){if(!navigator.serviceWorker)return;const offLineFirst=this;navigator.serviceWorker.register("sw.js").then(function(reg){navigator.serviceWorker.controller&&(reg.waiting?offLineFirst.updateReady(reg.waiting):reg.installing?offLineFirst.trackInstalling(reg.installing):reg.addEventListener("updatefound",function(){offLineFirst.trackInstalling(reg.installing)}))})}trackInstalling(worker){const offLineFirst=this;worker.addEventListener("statechange",function(){"installed"==worker.state&&offLineFirst.updateReady(worker)})}updateReady(worker){const div=document.createElement("div");div.id="service-worker",div.className="service-worker";const refresh=document.createElement("button");refresh.id="refresh",refresh.type="button",refresh.className="button-sw",refresh.innerHTML="refresh",div.append(refresh);const dismiss=document.createElement("button");dismiss.id="dismiss",dismiss.type="button",dismiss.className="button-sw",dismiss.innerHTML="dismiss",div.append(dismiss),document.body.append(div),refresh.addEventListener("click",function(event){worker.postMessage({action:"skipWaiting"})}),dismiss.addEventListener("click",function(event){div.style.display="none"})}}const offLine=new OffLineFirst;if(offLine.registerServiceWorker(),-1!==location.pathname.indexOf("restaurant.html")){var map;window.initMap=(()=>{fetchRestaurantFromURL((error,restaurant)=>{error?console.error(error):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:restaurant.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurantInfo(self.restaurant,self.map))})}),fetchRestaurantFromURL=(callback=>{if(self.restaurant)return void callback(null,self.restaurant);const id=getParameterByName("id");id?DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant,restaurant?(fillRestaurantHTML(),callback(null,restaurant)):console.error(error)}):(error="No restaurant id in URL",callback(error,null))}),fillRestaurantHTML=((restaurant=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=restaurant.name;const title=document.title;document.title=`${title} - ${restaurant.name}`;const address=document.getElementById("restaurant-address");address.innerHTML=restaurant.address,address.setAttribute("aria-label","Address: "+restaurant.address);const image=document.getElementById("restaurant-img");image.className="restaurant-img",image.alt=`Image of ${restaurant.name}`,image.src=`${DBHelper.imageUrlForRestaurant(restaurant)}${restaurant.photograph_maxw}`;const cuisine=document.getElementById("restaurant-cuisine");cuisine.innerHTML=restaurant.cuisine_type,cuisine.setAttribute("aria-label","Cuisine: "+restaurant.cuisine_type),restaurant.operating_hours&&fillRestaurantHoursHTML();const mediaReviews=document.getElementById("media-reviews");mediaReviews.innerHTML="<em>Media reviews: "+calcMediaReviews()+"</em>",mediaReviews.setAttribute("aria-label","Media reviews: "+calcMediaReviews()),fillReviewsHTML(),fillRestaurantHoursSummaryHTML()}),fillRestaurantHoursHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");let i=0;for(let key in operatingHours){const row=document.createElement("tr");row.className=i%2!=0?"odd":"even";const day=document.createElement("td");day.innerHTML=key,row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key],row.appendChild(time),hours.appendChild(row),i++}}),fillRestaurantHoursSummaryHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours_summary=document.getElementById("hours-summary"),days=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];let string="Opening time: ",i=0;for(let key in operatingHours)0==i?(string+=days[i],operatingHours[days[i+1]]!=operatingHours[days[i]]&&(string+=" "+operatingHours[days[i]])):operatingHours[days[i]]==operatingHours[days[i-1]]?(string+=", "+days[i],operatingHours[days[i+1]]!=operatingHours[days[i]]&&(string+=" "+operatingHours[days[i]])):(string+="; "+days[i],operatingHours[days[i+1]]!=operatingHours[days[i]]&&(string+=" "+operatingHours[days[i]])),i++;hours_summary.innerHTML=string}),fillReviewsHTML=((reviews=self.restaurant.reviews)=>{const container=document.getElementById("reviews-container"),title=document.createElement("h2");if(title.innerHTML="Reviews",container.appendChild(title),!reviews){const noReviews=document.createElement("p");return noReviews.innerHTML="No reviews yet!",void container.appendChild(noReviews)}const ul=document.getElementById("reviews-list");reviews.forEach(review=>{ul.appendChild(createReviewHTML(review))}),container.appendChild(ul)}),createReviewHTML=(review=>{const li=document.createElement("li"),article=document.createElement("article");article.className="cont-review",li.appendChild(article);const header=document.createElement("header");article.appendChild(header);const name=document.createElement("h1");name.className="name-review",name.innerHTML=review.name,header.appendChild(name);const date=document.createElement("p");date.className="date-review",date.innerHTML=review.date,header.appendChild(date);const div_cont=document.createElement("div");div_cont.className="body-review",article.appendChild(div_cont);const rating=document.createElement("p");rating.className="rating-review",rating.innerHTML=`Rating: ${review.rating}`,div_cont.appendChild(rating);const comments=document.createElement("p");return comments.className="comment-review",comments.innerHTML=review.comments,div_cont.appendChild(comments),li}),calcMediaReviews=((reviews=self.restaurant.reviews)=>{if(reviews){let i,sum=0,media=0,num_reviews=reviews.length;for(i=0;i<num_reviews;i++)sum+=reviews[i].rating;return media=(media=sum/num_reviews)>0?media.toFixed(2):"No reviews available"}return"No reviews available"}),fillBreadcrumb=((restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb"),li=document.createElement("li");li.innerHTML=restaurant.name,breadcrumb.appendChild(li)}),getParameterByName=((name,url)=>{url||(url=window.location.href),name=name.replace(/[\[\]]/g,"\\$&");const results=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`).exec(url);return results?results[2]?decodeURIComponent(results[2].replace(/\+/g," ")):"":null});const skip_link_restaurant_info=document.getElementById("skip-link-restaurant-info");if(null!==skip_link_restaurant_info){document.getElementById("restaurant-container");skip_link_restaurant_info.addEventListener("keydown",function(event){const key=event.charCode||event.keyCode;32!==key&&13!==key||restaurant_focus.focus()})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
